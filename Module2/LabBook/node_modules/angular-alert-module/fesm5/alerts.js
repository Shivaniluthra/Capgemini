import { Injectable, Component, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ AlertsConfigData = {};
AlertsConfigData["error"] = {
    icon: 'error'
};
AlertsConfigData["success"] = {
    icon: 'done'
};
AlertsConfigData["DefaultSettings"] = {
    icon: 'error',
    timeout: 3
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AlertsService = /** @class */ (function () {
    function AlertsService() {
        // Observable alerts
        this.alertsSubject = new Subject();
    }
    // Service message commands
    /**
     * @param {?} message
     * @param {?} type
     * @return {?}
     */
    AlertsService.prototype.setMessage = /**
     * @param {?} message
     * @param {?} type
     * @return {?}
     */
    function (message, type) {
        this.alertsSubject.next({ message: message, type: type });
    };
    /**
     * @return {?}
     */
    AlertsService.prototype.getSubject = /**
     * @return {?}
     */
    function () {
        return this.alertsSubject.asObservable();
    };
    /**
     * @param {?} messagetype
     * @param {?} key
     * @return {?}
     */
    AlertsService.prototype.getConfig = /**
     * @param {?} messagetype
     * @param {?} key
     * @return {?}
     */
    function (messagetype, key) {
        if (typeof AlertsConfigData[messagetype] == 'undefined') {
            return AlertsConfigData["DefaultSettings"][key];
        }
        else {
            return (typeof AlertsConfigData[messagetype][key] != 'undefined') ? AlertsConfigData[messagetype][key] : AlertsConfigData["DefaultSettings"][key];
        }
    };
    /**
     * @param {?} messagetype
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    AlertsService.prototype.setConfig = /**
     * @param {?} messagetype
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (messagetype, key, value) {
        if (typeof AlertsConfigData[messagetype] == 'undefined') {
            AlertsConfigData[messagetype] = {};
        }
        AlertsConfigData[messagetype][key] = value;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    AlertsService.prototype.setDefaults = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        AlertsConfigData["DefaultSettings"][key] = value;
    };
    AlertsService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    AlertsService.ctorParameters = function () { return []; };
    return AlertsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AlertsComponent = /** @class */ (function () {
    function AlertsComponent(alerts) {
        this.alerts = alerts;
        this.messages = [];
    }
    /**
     * @return {?}
     */
    AlertsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.alerts.getSubject().subscribe(function (object) {
            object["icon"] = _this.alerts.getConfig(object.type, 'icon');
            _this.timeout = _this.alerts.getConfig(object.type, 'timeout');
            console.log('this.timeout', _this.timeout);
            _this.messages.push(object);
            if (_this.timeout > 0) {
                setTimeout(function () {
                    _this.removeMessage(object);
                }, _this.timeout * 1000);
            }
        });
    };
    /**
     * @param {?} message
     * @return {?}
     */
    AlertsComponent.prototype.removeMessage = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        this.messages.splice(this.messages.indexOf(message), 1);
    };
    AlertsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-alerts',
                    template: "<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n<div  class=\"alertsContainer\">\n\t<div class=\"alertsRow {{message.type}}\" *ngFor=\"let message of messages\">\n\t\t<div class=\"iconpanel\"><i class=\"mat-icon material-icons\">{{message.icon}}</i></div>\n\t\t<div class=\"messagepanel\">{{message.message}}</div>\n\t\t<div class=\"closeicon\"><a (click)=\"removeMessage(message)\" href=\"#\">X</a></div>\n  \t</div>\n</div>",
                    styles: [".alertsContainer{position:absolute;top:10px;right:20px}.alertsContainer .material-icons{padding-top:36%}.alertsContainer .alertsRow{margin-top:12px;transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:block;position:relative;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);border-radius:2px;transition:3s opacity 0;float:left;clear:both}.alertsContainer .alertsRow .iconpanel{float:left;width:50px;padding:15px;text-align:center;height:51px}.alertsContainer .alertsRow .messagepanel{float:left;height:41px;padding:20px;text-align:left;max-width:353px;width:350px}.alertsContainer .alertsRow .closeicon{position:absolute;top:10px;right:10px;display:none;text-decoration:none}.alertsContainer .alertsRow:hover .closeicon{display:block}.alertsContainer .alertsRow.error{border:1px solid #d80202}.alertsContainer .alertsRow.error .iconpanel{background:#d80202}.alertsContainer .alertsRow.error .messagepanel{color:#000;background:#fff}.alertsContainer .alertsRow.error .closeicon{color:#000}.alertsContainer .alertsRow.error .closeicon a{color:#000;text-decoration:none;font-size:12px}.alertsContainer .alertsRow.success{border:1px solid #27b235}.alertsContainer .alertsRow.success .iconpanel{background:#27b235;color:#fff}.alertsContainer .alertsRow.success .messagepanel{color:#000;background:#fff}.alertsContainer .alertsRow.success .closeicon{color:#000}.alertsContainer .alertsRow.success .closeicon a{color:#000;text-decoration:none;font-size:12px}.alertsContainer .alertsRow.warn{border:1px solid #ffc549}.alertsContainer .alertsRow.warn .iconpanel{background:#ffc549;color:#fff}.alertsContainer .alertsRow.warn .messagepanel{color:#000;background:#fff}.alertsContainer .alertsRow.warn .closeicon{color:#000}.alertsContainer .alertsRow.warn .closeicon a{color:#000;text-decoration:none;font-size:12px}"]
                },] },
    ];
    /** @nocollapse */
    AlertsComponent.ctorParameters = function () { return [
        { type: AlertsService, },
    ]; };
    return AlertsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AlertsModule = /** @class */ (function () {
    function AlertsModule() {
    }
    /**
     * @return {?}
     */
    AlertsModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AlertsModule,
            providers: [AlertsService]
        };
    };
    AlertsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        AlertsComponent
                    ],
                    exports: [
                        AlertsComponent
                    ]
                },] },
    ];
    return AlertsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { AlertsService, AlertsComponent, AlertsModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,