{"version":3,"sources":["ng://alerts/lib/alerts.config.ts","ng://alerts/lib/alerts.service.ts","ng://alerts/lib/alerts.component.ts","ng://alerts/lib/alerts.module.ts"],"names":["AlertsConfigData","error","icon","success","DefaultSettings","timeout","AlertsService","Subject","prototype","setMessage","message","type","this","alertsSubject","next","getSubject","asObservable","getConfig","messagetype","key","setConfig","value","setDefaults","Injectable","AlertsComponent","alerts","ngOnInit","_this","subscribe","object","console","log","messages","push","setTimeout","removeMessage","splice","indexOf","Component","args","selector","template","styles","AlertsModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports"],"mappings":"kVAIO,IAAIA,EAA+B,CAE1CC,MAAyB,CACxBC,KAAM,SAGPC,QAA2B,CAC1BD,KAAM,QAGPE,gBAAmC,CAClCF,KAAM,QACNG,QAAS,IChBVC,EAAA,WAmBE,SAAAA,uBAFgB,IAAIC,EAAAA,eAMpBD,EAAAE,UAAAC,WAAA,SAAWC,EAAiBC,GAC1BC,KAAKC,cAAcC,KAAK,CAACJ,QAAQA,EAAQC,KAAKA,KAGhDL,EAAAE,UAAAO,WAAA,WACE,OAAOH,KAAKC,cAAcG,gBAG5BV,EAAAE,UAAAS,UAAA,SAAUC,EAAqBC,GAC7B,MAA2C,oBAAjCnB,EAAiBkB,GAChBlB,EAAgB,gBAAiBmB,GAEa,oBAAtCnB,EAAiBkB,GAAaC,GAAuBnB,EAAiBkB,GAAaC,GAAMnB,EAAgB,gBAAiBmB,IAI/Ib,EAAAE,UAAAY,UAAA,SAAUF,EAAqBC,EAAaE,GACC,oBAAjCrB,EAAiBkB,KACvBlB,EAAiBkB,GAAe,IAEpClB,EAAiBkB,GAAaC,GAAOE,GAGvCf,EAAAE,UAAAc,YAAA,SAAYH,EAAaE,GACvBrB,EAAgB,gBAAiBmB,GAAOE,uBAlC3CE,EAAAA,qDAbD,GCAAC,EAAA,WA0BE,SAAAA,EAAoBC,GAAAb,KAAAa,OAAAA,gBAFQ,UAM5BD,EAAAhB,UAAAkB,SAAA,WAAA,IAAAC,EAAAf,KACEA,KAAKa,OAAOV,aAAaa,UAAW,SAACC,GACjCA,EAAM,KAAQF,EAAKF,OAAOR,UAAUY,EAAOlB,KAAK,QAChDgB,EAAKtB,QAAUsB,EAAKF,OAAOR,UAAUY,EAAOlB,KAAK,WACjDmB,QAAQC,IAAI,eAAeJ,EAAKtB,SAChCsB,EAAKK,SAASC,KAAKJ,GACD,EAAfF,EAAKtB,SACN6B,WAAY,WACVP,EAAKQ,cAAcN,IACJ,IAAfF,EAAKtB,YAKfmB,EAAAhB,UAAA2B,cAAA,SAAczB,GACVE,KAAKoB,SAASI,OAAOxB,KAAKoB,SAASK,QAAQ3B,GAAS,wBAlCzD4B,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,aACVC,SAAU,kcAQVC,OAAQ,CAAC,q3DApBFpC,OADT,GCAAqC,EAAA,gCAoBSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CAACxC,yBAfjByC,EAAAA,SAAQR,KAAA,CAAC,CACRS,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZ1B,GAEF2B,QAAS,CACP3B,SAhBJ","sourcesContent":["export interface ConfigData {\n\t[key: string]: any;\n}\n\nexport var AlertsConfigData: ConfigData = {};\n\nAlertsConfigData.error = {\n\ticon: 'error'\n};\n\nAlertsConfigData.success = {\n\ticon: 'done'\n};\n\nAlertsConfigData.DefaultSettings = {\n\ticon: 'error',\n\ttimeout: 3\n};","import { Injectable } from '@angular/core';\nimport { Subject }    from 'rxjs';\nimport { Observable }    from 'rxjs';\nimport { AlertsConfigData } from './alerts.config';\n\n\nexport interface AlertsInterface {\n  alertsSubject:Subject<Object>;\n  setMessage(message: string, type: string): void;\n  getConfig(message: string, key: string): string;\n  setConfig(messagetype: string, key: string, value: string): void;\n}\n \n@Injectable()\nexport class AlertsService implements AlertsInterface    {\n \n  // Observable alerts\n  alertsSubject = new Subject<Object>();\n\n  constructor() {\n  }\n\n  // Service message commands\n  setMessage(message: string, type: string) {\n    this.alertsSubject.next({message:message,type:type});\n  }\n\n  getSubject(): any {\n    return this.alertsSubject.asObservable();\n  }\n\n  getConfig(messagetype: string, key: string) : string {\n    if(typeof AlertsConfigData[messagetype] == 'undefined') {\n        return AlertsConfigData.DefaultSettings[key];\n    } else {\n        return (typeof AlertsConfigData[messagetype][key] != 'undefined') ? AlertsConfigData[messagetype][key]: AlertsConfigData.DefaultSettings[key];\n    }      \n  }\n\n  setConfig(messagetype: string, key: string, value: string) {\n    if(typeof AlertsConfigData[messagetype] == 'undefined') {\n        AlertsConfigData[messagetype] = {};\n    }\n    AlertsConfigData[messagetype][key] = value;\n  }\n\n  setDefaults(key: string, value: any) {\n    AlertsConfigData.DefaultSettings[key] = value;    \n  }\n\n}","import { Component, OnInit } from '@angular/core';\nimport { AlertsService } from './alerts.service';\n\n\n\nexport interface Message {\n  message: string;\n  type: string;\n  [key: string]: string;\n}\n\n@Component({\n  selector: 'app-alerts',\n  template: `<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n<div  class=\"alertsContainer\">\n\t<div class=\"alertsRow {{message.type}}\" *ngFor=\"let message of messages\">\n\t\t<div class=\"iconpanel\"><i class=\"mat-icon material-icons\">{{message.icon}}</i></div>\n\t\t<div class=\"messagepanel\">{{message.message}}</div>\n\t\t<div class=\"closeicon\"><a (click)=\"removeMessage(message)\" href=\"#\">X</a></div>\n  \t</div>\n</div>`,\n  styles: [`.alertsContainer{position:absolute;top:10px;right:20px}.alertsContainer .material-icons{padding-top:36%}.alertsContainer .alertsRow{margin-top:12px;transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:block;position:relative;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);border-radius:2px;transition:3s opacity 0;float:left;clear:both}.alertsContainer .alertsRow .iconpanel{float:left;width:50px;padding:15px;text-align:center;height:51px}.alertsContainer .alertsRow .messagepanel{float:left;height:41px;padding:20px;text-align:left;max-width:353px;width:350px}.alertsContainer .alertsRow .closeicon{position:absolute;top:10px;right:10px;display:none;text-decoration:none}.alertsContainer .alertsRow:hover .closeicon{display:block}.alertsContainer .alertsRow.error{border:1px solid #d80202}.alertsContainer .alertsRow.error .iconpanel{background:#d80202}.alertsContainer .alertsRow.error .messagepanel{color:#000;background:#fff}.alertsContainer .alertsRow.error .closeicon{color:#000}.alertsContainer .alertsRow.error .closeicon a{color:#000;text-decoration:none;font-size:12px}.alertsContainer .alertsRow.success{border:1px solid #27b235}.alertsContainer .alertsRow.success .iconpanel{background:#27b235;color:#fff}.alertsContainer .alertsRow.success .messagepanel{color:#000;background:#fff}.alertsContainer .alertsRow.success .closeicon{color:#000}.alertsContainer .alertsRow.success .closeicon a{color:#000;text-decoration:none;font-size:12px}.alertsContainer .alertsRow.warn{border:1px solid #ffc549}.alertsContainer .alertsRow.warn .iconpanel{background:#ffc549;color:#fff}.alertsContainer .alertsRow.warn .messagepanel{color:#000;background:#fff}.alertsContainer .alertsRow.warn .closeicon{color:#000}.alertsContainer .alertsRow.warn .closeicon a{color:#000;text-decoration:none;font-size:12px}`]\n})\nexport class AlertsComponent implements OnInit {\n  public messages: Object[] = [];\n  public timeout: any;\n  constructor(private alerts: AlertsService) { \n\n  }\n\n  ngOnInit() {\n    this.alerts.getSubject().subscribe( (object: Message) => {\n        object.icon = this.alerts.getConfig(object.type,'icon');\n        this.timeout = this.alerts.getConfig(object.type,'timeout');    \n        console.log('this.timeout',this.timeout);\n        this.messages.push(object);\n        if(this.timeout > 0) {\n          setTimeout( () => {\n            this.removeMessage(object);\n          },this.timeout * 1000);\n        }\n      });    \n  }\n\n  removeMessage(message: Object) {\n      this.messages.splice(this.messages.indexOf(message),1);\n  }\n\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AlertsComponent } from './alerts.component';\nimport { AlertsService } from './alerts.service';\n\nexport * from './alerts.component';\nexport * from './alerts.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    AlertsComponent\n  ],\n  exports: [\n    AlertsComponent\n  ]\n})\nexport class AlertsModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: AlertsModule,\n      providers: [AlertsService]\n    };\n  }\n}\n"]}