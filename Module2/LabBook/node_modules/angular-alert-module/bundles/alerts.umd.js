(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('alerts', ['exports', '@angular/core', 'rxjs', '@angular/common'], factory) :
    (factory((global.alerts = {}),global.ng.core,global.rxjs,global.ng.common));
}(this, (function (exports,core,rxjs,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ AlertsConfigData = {};
    AlertsConfigData["error"] = {
        icon: 'error'
    };
    AlertsConfigData["success"] = {
        icon: 'done'
    };
    AlertsConfigData["DefaultSettings"] = {
        icon: 'error',
        timeout: 3
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AlertsService = (function () {
        function AlertsService() {
            // Observable alerts
            this.alertsSubject = new rxjs.Subject();
        }
        // Service message commands
        /**
         * @param {?} message
         * @param {?} type
         * @return {?}
         */
        AlertsService.prototype.setMessage = /**
         * @param {?} message
         * @param {?} type
         * @return {?}
         */
            function (message, type) {
                this.alertsSubject.next({ message: message, type: type });
            };
        /**
         * @return {?}
         */
        AlertsService.prototype.getSubject = /**
         * @return {?}
         */
            function () {
                return this.alertsSubject.asObservable();
            };
        /**
         * @param {?} messagetype
         * @param {?} key
         * @return {?}
         */
        AlertsService.prototype.getConfig = /**
         * @param {?} messagetype
         * @param {?} key
         * @return {?}
         */
            function (messagetype, key) {
                if (typeof AlertsConfigData[messagetype] == 'undefined') {
                    return AlertsConfigData["DefaultSettings"][key];
                }
                else {
                    return (typeof AlertsConfigData[messagetype][key] != 'undefined') ? AlertsConfigData[messagetype][key] : AlertsConfigData["DefaultSettings"][key];
                }
            };
        /**
         * @param {?} messagetype
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        AlertsService.prototype.setConfig = /**
         * @param {?} messagetype
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (messagetype, key, value) {
                if (typeof AlertsConfigData[messagetype] == 'undefined') {
                    AlertsConfigData[messagetype] = {};
                }
                AlertsConfigData[messagetype][key] = value;
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        AlertsService.prototype.setDefaults = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                AlertsConfigData["DefaultSettings"][key] = value;
            };
        AlertsService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        AlertsService.ctorParameters = function () { return []; };
        return AlertsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AlertsComponent = (function () {
        function AlertsComponent(alerts) {
            this.alerts = alerts;
            this.messages = [];
        }
        /**
         * @return {?}
         */
        AlertsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.alerts.getSubject().subscribe(function (object) {
                    object["icon"] = _this.alerts.getConfig(object.type, 'icon');
                    _this.timeout = _this.alerts.getConfig(object.type, 'timeout');
                    console.log('this.timeout', _this.timeout);
                    _this.messages.push(object);
                    if (_this.timeout > 0) {
                        setTimeout(function () {
                            _this.removeMessage(object);
                        }, _this.timeout * 1000);
                    }
                });
            };
        /**
         * @param {?} message
         * @return {?}
         */
        AlertsComponent.prototype.removeMessage = /**
         * @param {?} message
         * @return {?}
         */
            function (message) {
                this.messages.splice(this.messages.indexOf(message), 1);
            };
        AlertsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-alerts',
                        template: "<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n<div  class=\"alertsContainer\">\n\t<div class=\"alertsRow {{message.type}}\" *ngFor=\"let message of messages\">\n\t\t<div class=\"iconpanel\"><i class=\"mat-icon material-icons\">{{message.icon}}</i></div>\n\t\t<div class=\"messagepanel\">{{message.message}}</div>\n\t\t<div class=\"closeicon\"><a (click)=\"removeMessage(message)\" href=\"#\">X</a></div>\n  \t</div>\n</div>",
                        styles: [".alertsContainer{position:absolute;top:10px;right:20px}.alertsContainer .material-icons{padding-top:36%}.alertsContainer .alertsRow{margin-top:12px;transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:block;position:relative;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);border-radius:2px;transition:3s opacity 0;float:left;clear:both}.alertsContainer .alertsRow .iconpanel{float:left;width:50px;padding:15px;text-align:center;height:51px}.alertsContainer .alertsRow .messagepanel{float:left;height:41px;padding:20px;text-align:left;max-width:353px;width:350px}.alertsContainer .alertsRow .closeicon{position:absolute;top:10px;right:10px;display:none;text-decoration:none}.alertsContainer .alertsRow:hover .closeicon{display:block}.alertsContainer .alertsRow.error{border:1px solid #d80202}.alertsContainer .alertsRow.error .iconpanel{background:#d80202}.alertsContainer .alertsRow.error .messagepanel{color:#000;background:#fff}.alertsContainer .alertsRow.error .closeicon{color:#000}.alertsContainer .alertsRow.error .closeicon a{color:#000;text-decoration:none;font-size:12px}.alertsContainer .alertsRow.success{border:1px solid #27b235}.alertsContainer .alertsRow.success .iconpanel{background:#27b235;color:#fff}.alertsContainer .alertsRow.success .messagepanel{color:#000;background:#fff}.alertsContainer .alertsRow.success .closeicon{color:#000}.alertsContainer .alertsRow.success .closeicon a{color:#000;text-decoration:none;font-size:12px}.alertsContainer .alertsRow.warn{border:1px solid #ffc549}.alertsContainer .alertsRow.warn .iconpanel{background:#ffc549;color:#fff}.alertsContainer .alertsRow.warn .messagepanel{color:#000;background:#fff}.alertsContainer .alertsRow.warn .closeicon{color:#000}.alertsContainer .alertsRow.warn .closeicon a{color:#000;text-decoration:none;font-size:12px}"]
                    },] },
        ];
        /** @nocollapse */
        AlertsComponent.ctorParameters = function () {
            return [
                { type: AlertsService, },
            ];
        };
        return AlertsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AlertsModule = (function () {
        function AlertsModule() {
        }
        /**
         * @return {?}
         */
        AlertsModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: AlertsModule,
                    providers: [AlertsService]
                };
            };
        AlertsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            AlertsComponent
                        ],
                        exports: [
                            AlertsComponent
                        ]
                    },] },
        ];
        return AlertsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.AlertsService = AlertsService;
    exports.AlertsComponent = AlertsComponent;
    exports.AlertsModule = AlertsModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnRzLnVtZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vYWxlcnRzL2xpYi9hbGVydHMuY29uZmlnLnRzIiwibmc6Ly9hbGVydHMvbGliL2FsZXJ0cy5zZXJ2aWNlLnRzIiwibmc6Ly9hbGVydHMvbGliL2FsZXJ0cy5jb21wb25lbnQudHMiLCJuZzovL2FsZXJ0cy9saWIvYWxlcnRzLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIENvbmZpZ0RhdGEge1xuXHRba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCB2YXIgQWxlcnRzQ29uZmlnRGF0YTogQ29uZmlnRGF0YSA9IHt9O1xuXG5BbGVydHNDb25maWdEYXRhLmVycm9yID0ge1xuXHRpY29uOiAnZXJyb3InXG59O1xuXG5BbGVydHNDb25maWdEYXRhLnN1Y2Nlc3MgPSB7XG5cdGljb246ICdkb25lJ1xufTtcblxuQWxlcnRzQ29uZmlnRGF0YS5EZWZhdWx0U2V0dGluZ3MgPSB7XG5cdGljb246ICdlcnJvcicsXG5cdHRpbWVvdXQ6IDNcbn07IiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9ICAgIGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9ICAgIGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWxlcnRzQ29uZmlnRGF0YSB9IGZyb20gJy4vYWxlcnRzLmNvbmZpZyc7XG5cblxuZXhwb3J0IGludGVyZmFjZSBBbGVydHNJbnRlcmZhY2Uge1xuICBhbGVydHNTdWJqZWN0OlN1YmplY3Q8T2JqZWN0PjtcbiAgc2V0TWVzc2FnZShtZXNzYWdlOiBzdHJpbmcsIHR5cGU6IHN0cmluZyk6IHZvaWQ7XG4gIGdldENvbmZpZyhtZXNzYWdlOiBzdHJpbmcsIGtleTogc3RyaW5nKTogc3RyaW5nO1xuICBzZXRDb25maWcobWVzc2FnZXR5cGU6IHN0cmluZywga2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xufVxuIFxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFsZXJ0c1NlcnZpY2UgaW1wbGVtZW50cyBBbGVydHNJbnRlcmZhY2UgICAge1xuIFxuICAvLyBPYnNlcnZhYmxlIGFsZXJ0c1xuICBhbGVydHNTdWJqZWN0ID0gbmV3IFN1YmplY3Q8T2JqZWN0PigpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgLy8gU2VydmljZSBtZXNzYWdlIGNvbW1hbmRzXG4gIHNldE1lc3NhZ2UobWVzc2FnZTogc3RyaW5nLCB0eXBlOiBzdHJpbmcpIHtcbiAgICB0aGlzLmFsZXJ0c1N1YmplY3QubmV4dCh7bWVzc2FnZTptZXNzYWdlLHR5cGU6dHlwZX0pO1xuICB9XG5cbiAgZ2V0U3ViamVjdCgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLmFsZXJ0c1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBnZXRDb25maWcobWVzc2FnZXR5cGU6IHN0cmluZywga2V5OiBzdHJpbmcpIDogc3RyaW5nIHtcbiAgICBpZih0eXBlb2YgQWxlcnRzQ29uZmlnRGF0YVttZXNzYWdldHlwZV0gPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIEFsZXJ0c0NvbmZpZ0RhdGEuRGVmYXVsdFNldHRpbmdzW2tleV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgQWxlcnRzQ29uZmlnRGF0YVttZXNzYWdldHlwZV1ba2V5XSAhPSAndW5kZWZpbmVkJykgPyBBbGVydHNDb25maWdEYXRhW21lc3NhZ2V0eXBlXVtrZXldOiBBbGVydHNDb25maWdEYXRhLkRlZmF1bHRTZXR0aW5nc1trZXldO1xuICAgIH0gICAgICBcbiAgfVxuXG4gIHNldENvbmZpZyhtZXNzYWdldHlwZTogc3RyaW5nLCBrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xuICAgIGlmKHR5cGVvZiBBbGVydHNDb25maWdEYXRhW21lc3NhZ2V0eXBlXSA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBBbGVydHNDb25maWdEYXRhW21lc3NhZ2V0eXBlXSA9IHt9O1xuICAgIH1cbiAgICBBbGVydHNDb25maWdEYXRhW21lc3NhZ2V0eXBlXVtrZXldID0gdmFsdWU7XG4gIH1cblxuICBzZXREZWZhdWx0cyhrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgIEFsZXJ0c0NvbmZpZ0RhdGEuRGVmYXVsdFNldHRpbmdzW2tleV0gPSB2YWx1ZTsgICAgXG4gIH1cblxufSIsImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbGVydHNTZXJ2aWNlIH0gZnJvbSAnLi9hbGVydHMuc2VydmljZSc7XG5cblxuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2Uge1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtYWxlcnRzJyxcbiAgdGVtcGxhdGU6IGA8bGluayBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9pY29uP2ZhbWlseT1NYXRlcmlhbCtJY29uc1wiIHJlbD1cInN0eWxlc2hlZXRcIj5cbjxkaXYgIGNsYXNzPVwiYWxlcnRzQ29udGFpbmVyXCI+XG5cdDxkaXYgY2xhc3M9XCJhbGVydHNSb3cge3ttZXNzYWdlLnR5cGV9fVwiICpuZ0Zvcj1cImxldCBtZXNzYWdlIG9mIG1lc3NhZ2VzXCI+XG5cdFx0PGRpdiBjbGFzcz1cImljb25wYW5lbFwiPjxpIGNsYXNzPVwibWF0LWljb24gbWF0ZXJpYWwtaWNvbnNcIj57e21lc3NhZ2UuaWNvbn19PC9pPjwvZGl2PlxuXHRcdDxkaXYgY2xhc3M9XCJtZXNzYWdlcGFuZWxcIj57e21lc3NhZ2UubWVzc2FnZX19PC9kaXY+XG5cdFx0PGRpdiBjbGFzcz1cImNsb3NlaWNvblwiPjxhIChjbGljayk9XCJyZW1vdmVNZXNzYWdlKG1lc3NhZ2UpXCIgaHJlZj1cIiNcIj5YPC9hPjwvZGl2PlxuICBcdDwvZGl2PlxuPC9kaXY+YCxcbiAgc3R5bGVzOiBbYC5hbGVydHNDb250YWluZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjEwcHg7cmlnaHQ6MjBweH0uYWxlcnRzQ29udGFpbmVyIC5tYXRlcmlhbC1pY29uc3twYWRkaW5nLXRvcDozNiV9LmFsZXJ0c0NvbnRhaW5lciAuYWxlcnRzUm93e21hcmdpbi10b3A6MTJweDt0cmFuc2l0aW9uOmJveC1zaGFkb3cgMjgwbXMgY3ViaWMtYmV6aWVyKC40LDAsLjIsMSk7ZGlzcGxheTpibG9jaztwb3NpdGlvbjpyZWxhdGl2ZTtib3gtc2hhZG93OjAgM3B4IDFweCAtMnB4IHJnYmEoMCwwLDAsLjIpLDAgMnB4IDJweCAwIHJnYmEoMCwwLDAsLjE0KSwwIDFweCA1cHggMCByZ2JhKDAsMCwwLC4xMik7Ym9yZGVyLXJhZGl1czoycHg7dHJhbnNpdGlvbjozcyBvcGFjaXR5IDA7ZmxvYXQ6bGVmdDtjbGVhcjpib3RofS5hbGVydHNDb250YWluZXIgLmFsZXJ0c1JvdyAuaWNvbnBhbmVse2Zsb2F0OmxlZnQ7d2lkdGg6NTBweDtwYWRkaW5nOjE1cHg7dGV4dC1hbGlnbjpjZW50ZXI7aGVpZ2h0OjUxcHh9LmFsZXJ0c0NvbnRhaW5lciAuYWxlcnRzUm93IC5tZXNzYWdlcGFuZWx7ZmxvYXQ6bGVmdDtoZWlnaHQ6NDFweDtwYWRkaW5nOjIwcHg7dGV4dC1hbGlnbjpsZWZ0O21heC13aWR0aDozNTNweDt3aWR0aDozNTBweH0uYWxlcnRzQ29udGFpbmVyIC5hbGVydHNSb3cgLmNsb3NlaWNvbntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTBweDtyaWdodDoxMHB4O2Rpc3BsYXk6bm9uZTt0ZXh0LWRlY29yYXRpb246bm9uZX0uYWxlcnRzQ29udGFpbmVyIC5hbGVydHNSb3c6aG92ZXIgLmNsb3NlaWNvbntkaXNwbGF5OmJsb2NrfS5hbGVydHNDb250YWluZXIgLmFsZXJ0c1Jvdy5lcnJvcntib3JkZXI6MXB4IHNvbGlkICNkODAyMDJ9LmFsZXJ0c0NvbnRhaW5lciAuYWxlcnRzUm93LmVycm9yIC5pY29ucGFuZWx7YmFja2dyb3VuZDojZDgwMjAyfS5hbGVydHNDb250YWluZXIgLmFsZXJ0c1Jvdy5lcnJvciAubWVzc2FnZXBhbmVse2NvbG9yOiMwMDA7YmFja2dyb3VuZDojZmZmfS5hbGVydHNDb250YWluZXIgLmFsZXJ0c1Jvdy5lcnJvciAuY2xvc2VpY29ue2NvbG9yOiMwMDB9LmFsZXJ0c0NvbnRhaW5lciAuYWxlcnRzUm93LmVycm9yIC5jbG9zZWljb24gYXtjb2xvcjojMDAwO3RleHQtZGVjb3JhdGlvbjpub25lO2ZvbnQtc2l6ZToxMnB4fS5hbGVydHNDb250YWluZXIgLmFsZXJ0c1Jvdy5zdWNjZXNze2JvcmRlcjoxcHggc29saWQgIzI3YjIzNX0uYWxlcnRzQ29udGFpbmVyIC5hbGVydHNSb3cuc3VjY2VzcyAuaWNvbnBhbmVse2JhY2tncm91bmQ6IzI3YjIzNTtjb2xvcjojZmZmfS5hbGVydHNDb250YWluZXIgLmFsZXJ0c1Jvdy5zdWNjZXNzIC5tZXNzYWdlcGFuZWx7Y29sb3I6IzAwMDtiYWNrZ3JvdW5kOiNmZmZ9LmFsZXJ0c0NvbnRhaW5lciAuYWxlcnRzUm93LnN1Y2Nlc3MgLmNsb3NlaWNvbntjb2xvcjojMDAwfS5hbGVydHNDb250YWluZXIgLmFsZXJ0c1Jvdy5zdWNjZXNzIC5jbG9zZWljb24gYXtjb2xvcjojMDAwO3RleHQtZGVjb3JhdGlvbjpub25lO2ZvbnQtc2l6ZToxMnB4fS5hbGVydHNDb250YWluZXIgLmFsZXJ0c1Jvdy53YXJue2JvcmRlcjoxcHggc29saWQgI2ZmYzU0OX0uYWxlcnRzQ29udGFpbmVyIC5hbGVydHNSb3cud2FybiAuaWNvbnBhbmVse2JhY2tncm91bmQ6I2ZmYzU0OTtjb2xvcjojZmZmfS5hbGVydHNDb250YWluZXIgLmFsZXJ0c1Jvdy53YXJuIC5tZXNzYWdlcGFuZWx7Y29sb3I6IzAwMDtiYWNrZ3JvdW5kOiNmZmZ9LmFsZXJ0c0NvbnRhaW5lciAuYWxlcnRzUm93Lndhcm4gLmNsb3NlaWNvbntjb2xvcjojMDAwfS5hbGVydHNDb250YWluZXIgLmFsZXJ0c1Jvdy53YXJuIC5jbG9zZWljb24gYXtjb2xvcjojMDAwO3RleHQtZGVjb3JhdGlvbjpub25lO2ZvbnQtc2l6ZToxMnB4fWBdXG59KVxuZXhwb3J0IGNsYXNzIEFsZXJ0c0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHB1YmxpYyBtZXNzYWdlczogT2JqZWN0W10gPSBbXTtcbiAgcHVibGljIHRpbWVvdXQ6IGFueTtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhbGVydHM6IEFsZXJ0c1NlcnZpY2UpIHsgXG5cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuYWxlcnRzLmdldFN1YmplY3QoKS5zdWJzY3JpYmUoIChvYmplY3Q6IE1lc3NhZ2UpID0+IHtcbiAgICAgICAgb2JqZWN0Lmljb24gPSB0aGlzLmFsZXJ0cy5nZXRDb25maWcob2JqZWN0LnR5cGUsJ2ljb24nKTtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gdGhpcy5hbGVydHMuZ2V0Q29uZmlnKG9iamVjdC50eXBlLCd0aW1lb3V0Jyk7ICAgIFxuICAgICAgICBjb25zb2xlLmxvZygndGhpcy50aW1lb3V0Jyx0aGlzLnRpbWVvdXQpO1xuICAgICAgICB0aGlzLm1lc3NhZ2VzLnB1c2gob2JqZWN0KTtcbiAgICAgICAgaWYodGhpcy50aW1lb3V0ID4gMCkge1xuICAgICAgICAgIHNldFRpbWVvdXQoICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlTWVzc2FnZShvYmplY3QpO1xuICAgICAgICAgIH0sdGhpcy50aW1lb3V0ICogMTAwMCk7XG4gICAgICAgIH1cbiAgICAgIH0pOyAgICBcbiAgfVxuXG4gIHJlbW92ZU1lc3NhZ2UobWVzc2FnZTogT2JqZWN0KSB7XG4gICAgICB0aGlzLm1lc3NhZ2VzLnNwbGljZSh0aGlzLm1lc3NhZ2VzLmluZGV4T2YobWVzc2FnZSksMSk7XG4gIH1cblxufSIsImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQWxlcnRzQ29tcG9uZW50IH0gZnJvbSAnLi9hbGVydHMuY29tcG9uZW50JztcbmltcG9ydCB7IEFsZXJ0c1NlcnZpY2UgfSBmcm9tICcuL2FsZXJ0cy5zZXJ2aWNlJztcblxuZXhwb3J0ICogZnJvbSAnLi9hbGVydHMuY29tcG9uZW50JztcbmV4cG9ydCAqIGZyb20gJy4vYWxlcnRzLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIEFsZXJ0c0NvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgQWxlcnRzQ29tcG9uZW50XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQWxlcnRzTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBBbGVydHNNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtBbGVydHNTZXJ2aWNlXVxuICAgIH07XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJTdWJqZWN0IiwiSW5qZWN0YWJsZSIsIkNvbXBvbmVudCIsIk5nTW9kdWxlIiwiQ29tbW9uTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBSU8scUJBQUksZ0JBQWdCLEdBQWUsRUFBRSxDQUFDO0lBRTdDLGdCQUFnQixZQUFTO1FBQ3hCLElBQUksRUFBRSxPQUFPO0tBQ2IsQ0FBQztJQUVGLGdCQUFnQixjQUFXO1FBQzFCLElBQUksRUFBRSxNQUFNO0tBQ1osQ0FBQztJQUVGLGdCQUFnQixzQkFBbUI7UUFDbEMsSUFBSSxFQUFFLE9BQU87UUFDYixPQUFPLEVBQUUsQ0FBQztLQUNWLENBQUM7Ozs7OztB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