{"version":3,"file":"alerts.js.map","sources":["ng://alerts/lib/alerts.config.ts","ng://alerts/lib/alerts.service.ts","ng://alerts/lib/alerts.component.ts","ng://alerts/lib/alerts.module.ts"],"sourcesContent":["export interface ConfigData {\n\t[key: string]: any;\n}\n\nexport var AlertsConfigData: ConfigData = {};\n\nAlertsConfigData.error = {\n\ticon: 'error'\n};\n\nAlertsConfigData.success = {\n\ticon: 'done'\n};\n\nAlertsConfigData.DefaultSettings = {\n\ticon: 'error',\n\ttimeout: 3\n};","import { Injectable } from '@angular/core';\nimport { Subject }    from 'rxjs';\nimport { Observable }    from 'rxjs';\nimport { AlertsConfigData } from './alerts.config';\n\n\nexport interface AlertsInterface {\n  alertsSubject:Subject<Object>;\n  setMessage(message: string, type: string): void;\n  getConfig(message: string, key: string): string;\n  setConfig(messagetype: string, key: string, value: string): void;\n}\n \n@Injectable()\nexport class AlertsService implements AlertsInterface    {\n \n  // Observable alerts\n  alertsSubject = new Subject<Object>();\n\n  constructor() {\n  }\n\n  // Service message commands\n  setMessage(message: string, type: string) {\n    this.alertsSubject.next({message:message,type:type});\n  }\n\n  getSubject(): any {\n    return this.alertsSubject.asObservable();\n  }\n\n  getConfig(messagetype: string, key: string) : string {\n    if(typeof AlertsConfigData[messagetype] == 'undefined') {\n        return AlertsConfigData.DefaultSettings[key];\n    } else {\n        return (typeof AlertsConfigData[messagetype][key] != 'undefined') ? AlertsConfigData[messagetype][key]: AlertsConfigData.DefaultSettings[key];\n    }      \n  }\n\n  setConfig(messagetype: string, key: string, value: string) {\n    if(typeof AlertsConfigData[messagetype] == 'undefined') {\n        AlertsConfigData[messagetype] = {};\n    }\n    AlertsConfigData[messagetype][key] = value;\n  }\n\n  setDefaults(key: string, value: any) {\n    AlertsConfigData.DefaultSettings[key] = value;    \n  }\n\n}","import { Component, OnInit } from '@angular/core';\nimport { AlertsService } from './alerts.service';\n\n\n\nexport interface Message {\n  message: string;\n  type: string;\n  [key: string]: string;\n}\n\n@Component({\n  selector: 'app-alerts',\n  template: `<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n<div  class=\"alertsContainer\">\n\t<div class=\"alertsRow {{message.type}}\" *ngFor=\"let message of messages\">\n\t\t<div class=\"iconpanel\"><i class=\"mat-icon material-icons\">{{message.icon}}</i></div>\n\t\t<div class=\"messagepanel\">{{message.message}}</div>\n\t\t<div class=\"closeicon\"><a (click)=\"removeMessage(message)\" href=\"#\">X</a></div>\n  \t</div>\n</div>`,\n  styles: [`.alertsContainer{position:absolute;top:10px;right:20px}.alertsContainer .material-icons{padding-top:36%}.alertsContainer .alertsRow{margin-top:12px;transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:block;position:relative;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);border-radius:2px;transition:3s opacity 0;float:left;clear:both}.alertsContainer .alertsRow .iconpanel{float:left;width:50px;padding:15px;text-align:center;height:51px}.alertsContainer .alertsRow .messagepanel{float:left;height:41px;padding:20px;text-align:left;max-width:353px;width:350px}.alertsContainer .alertsRow .closeicon{position:absolute;top:10px;right:10px;display:none;text-decoration:none}.alertsContainer .alertsRow:hover .closeicon{display:block}.alertsContainer .alertsRow.error{border:1px solid #d80202}.alertsContainer .alertsRow.error .iconpanel{background:#d80202}.alertsContainer .alertsRow.error .messagepanel{color:#000;background:#fff}.alertsContainer .alertsRow.error .closeicon{color:#000}.alertsContainer .alertsRow.error .closeicon a{color:#000;text-decoration:none;font-size:12px}.alertsContainer .alertsRow.success{border:1px solid #27b235}.alertsContainer .alertsRow.success .iconpanel{background:#27b235;color:#fff}.alertsContainer .alertsRow.success .messagepanel{color:#000;background:#fff}.alertsContainer .alertsRow.success .closeicon{color:#000}.alertsContainer .alertsRow.success .closeicon a{color:#000;text-decoration:none;font-size:12px}.alertsContainer .alertsRow.warn{border:1px solid #ffc549}.alertsContainer .alertsRow.warn .iconpanel{background:#ffc549;color:#fff}.alertsContainer .alertsRow.warn .messagepanel{color:#000;background:#fff}.alertsContainer .alertsRow.warn .closeicon{color:#000}.alertsContainer .alertsRow.warn .closeicon a{color:#000;text-decoration:none;font-size:12px}`]\n})\nexport class AlertsComponent implements OnInit {\n  public messages: Object[] = [];\n  public timeout: any;\n  constructor(private alerts: AlertsService) { \n\n  }\n\n  ngOnInit() {\n    this.alerts.getSubject().subscribe( (object: Message) => {\n        object.icon = this.alerts.getConfig(object.type,'icon');\n        this.timeout = this.alerts.getConfig(object.type,'timeout');    \n        console.log('this.timeout',this.timeout);\n        this.messages.push(object);\n        if(this.timeout > 0) {\n          setTimeout( () => {\n            this.removeMessage(object);\n          },this.timeout * 1000);\n        }\n      });    \n  }\n\n  removeMessage(message: Object) {\n      this.messages.splice(this.messages.indexOf(message),1);\n  }\n\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AlertsComponent } from './alerts.component';\nimport { AlertsService } from './alerts.service';\n\nexport * from './alerts.component';\nexport * from './alerts.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    AlertsComponent\n  ],\n  exports: [\n    AlertsComponent\n  ]\n})\nexport class AlertsModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: AlertsModule,\n      providers: [AlertsService]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
