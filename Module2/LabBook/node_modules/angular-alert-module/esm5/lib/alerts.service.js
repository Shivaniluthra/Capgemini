/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { AlertsConfigData } from './alerts.config';
/**
 * @record
 */
export function AlertsInterface() { }
function AlertsInterface_tsickle_Closure_declarations() {
    /** @type {?} */
    AlertsInterface.prototype.alertsSubject;
    /** @type {?} */
    AlertsInterface.prototype.setMessage;
    /** @type {?} */
    AlertsInterface.prototype.getConfig;
    /** @type {?} */
    AlertsInterface.prototype.setConfig;
}
var AlertsService = /** @class */ (function () {
    function AlertsService() {
        // Observable alerts
        this.alertsSubject = new Subject();
    }
    // Service message commands
    /**
     * @param {?} message
     * @param {?} type
     * @return {?}
     */
    AlertsService.prototype.setMessage = /**
     * @param {?} message
     * @param {?} type
     * @return {?}
     */
    function (message, type) {
        this.alertsSubject.next({ message: message, type: type });
    };
    /**
     * @return {?}
     */
    AlertsService.prototype.getSubject = /**
     * @return {?}
     */
    function () {
        return this.alertsSubject.asObservable();
    };
    /**
     * @param {?} messagetype
     * @param {?} key
     * @return {?}
     */
    AlertsService.prototype.getConfig = /**
     * @param {?} messagetype
     * @param {?} key
     * @return {?}
     */
    function (messagetype, key) {
        if (typeof AlertsConfigData[messagetype] == 'undefined') {
            return AlertsConfigData["DefaultSettings"][key];
        }
        else {
            return (typeof AlertsConfigData[messagetype][key] != 'undefined') ? AlertsConfigData[messagetype][key] : AlertsConfigData["DefaultSettings"][key];
        }
    };
    /**
     * @param {?} messagetype
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    AlertsService.prototype.setConfig = /**
     * @param {?} messagetype
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (messagetype, key, value) {
        if (typeof AlertsConfigData[messagetype] == 'undefined') {
            AlertsConfigData[messagetype] = {};
        }
        AlertsConfigData[messagetype][key] = value;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    AlertsService.prototype.setDefaults = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        AlertsConfigData["DefaultSettings"][key] = value;
    };
    AlertsService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    AlertsService.ctorParameters = function () { return []; };
    return AlertsService;
}());
export { AlertsService };
function AlertsService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    AlertsService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    AlertsService.ctorParameters;
    /** @type {?} */
    AlertsService.prototype.alertsSubject;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbGVydHMvIiwic291cmNlcyI6WyJsaWIvYWxlcnRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFTLE1BQU0sQ0FBQztBQUVsQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7OztJQWdCakQ7OzZCQUZnQixJQUFJLE9BQU8sRUFBVTtLQUdwQztJQUVELDJCQUEyQjs7Ozs7O0lBQzNCLGtDQUFVOzs7OztJQUFWLFVBQVcsT0FBZSxFQUFFLElBQVk7UUFDdEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBQyxPQUFPLEVBQUMsT0FBTyxFQUFDLElBQUksRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDO0tBQ3REOzs7O0lBRUQsa0NBQVU7OztJQUFWO1FBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7S0FDMUM7Ozs7OztJQUVELGlDQUFTOzs7OztJQUFULFVBQVUsV0FBbUIsRUFBRSxHQUFXO1FBQ3hDLEVBQUUsQ0FBQSxDQUFDLE9BQU8sZ0JBQWdCLENBQUMsV0FBVyxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNyRCxNQUFNLENBQUMsZ0JBQWdCLG9CQUFpQixHQUFHLENBQUMsQ0FBQztTQUNoRDtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osTUFBTSxDQUFDLENBQUMsT0FBTyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQyxDQUFDLGdCQUFnQixvQkFBaUIsR0FBRyxDQUFDLENBQUM7U0FDako7S0FDRjs7Ozs7OztJQUVELGlDQUFTOzs7Ozs7SUFBVCxVQUFVLFdBQW1CLEVBQUUsR0FBVyxFQUFFLEtBQWE7UUFDdkQsRUFBRSxDQUFBLENBQUMsT0FBTyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3JELGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUN0QztRQUNELGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztLQUM1Qzs7Ozs7O0lBRUQsbUNBQVc7Ozs7O0lBQVgsVUFBWSxHQUFXLEVBQUUsS0FBVTtRQUNqQyxnQkFBZ0Isb0JBQWlCLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztLQUMvQzs7Z0JBbkNGLFVBQVU7Ozs7d0JBYlg7O1NBY2EsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSAgICBmcm9tICdyeGpzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSAgICBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFsZXJ0c0NvbmZpZ0RhdGEgfSBmcm9tICcuL2FsZXJ0cy5jb25maWcnO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgQWxlcnRzSW50ZXJmYWNlIHtcbiAgYWxlcnRzU3ViamVjdDpTdWJqZWN0PE9iamVjdD47XG4gIHNldE1lc3NhZ2UobWVzc2FnZTogc3RyaW5nLCB0eXBlOiBzdHJpbmcpOiB2b2lkO1xuICBnZXRDb25maWcobWVzc2FnZTogc3RyaW5nLCBrZXk6IHN0cmluZyk6IHN0cmluZztcbiAgc2V0Q29uZmlnKG1lc3NhZ2V0eXBlOiBzdHJpbmcsIGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZDtcbn1cbiBcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBbGVydHNTZXJ2aWNlIGltcGxlbWVudHMgQWxlcnRzSW50ZXJmYWNlICAgIHtcbiBcbiAgLy8gT2JzZXJ2YWJsZSBhbGVydHNcbiAgYWxlcnRzU3ViamVjdCA9IG5ldyBTdWJqZWN0PE9iamVjdD4oKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIC8vIFNlcnZpY2UgbWVzc2FnZSBjb21tYW5kc1xuICBzZXRNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgdHlwZTogc3RyaW5nKSB7XG4gICAgdGhpcy5hbGVydHNTdWJqZWN0Lm5leHQoe21lc3NhZ2U6bWVzc2FnZSx0eXBlOnR5cGV9KTtcbiAgfVxuXG4gIGdldFN1YmplY3QoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5hbGVydHNTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgZ2V0Q29uZmlnKG1lc3NhZ2V0eXBlOiBzdHJpbmcsIGtleTogc3RyaW5nKSA6IHN0cmluZyB7XG4gICAgaWYodHlwZW9mIEFsZXJ0c0NvbmZpZ0RhdGFbbWVzc2FnZXR5cGVdID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBBbGVydHNDb25maWdEYXRhLkRlZmF1bHRTZXR0aW5nc1trZXldO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAodHlwZW9mIEFsZXJ0c0NvbmZpZ0RhdGFbbWVzc2FnZXR5cGVdW2tleV0gIT0gJ3VuZGVmaW5lZCcpID8gQWxlcnRzQ29uZmlnRGF0YVttZXNzYWdldHlwZV1ba2V5XTogQWxlcnRzQ29uZmlnRGF0YS5EZWZhdWx0U2V0dGluZ3Nba2V5XTtcbiAgICB9ICAgICAgXG4gIH1cblxuICBzZXRDb25maWcobWVzc2FnZXR5cGU6IHN0cmluZywga2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZih0eXBlb2YgQWxlcnRzQ29uZmlnRGF0YVttZXNzYWdldHlwZV0gPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgQWxlcnRzQ29uZmlnRGF0YVttZXNzYWdldHlwZV0gPSB7fTtcbiAgICB9XG4gICAgQWxlcnRzQ29uZmlnRGF0YVttZXNzYWdldHlwZV1ba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgc2V0RGVmYXVsdHMoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICBBbGVydHNDb25maWdEYXRhLkRlZmF1bHRTZXR0aW5nc1trZXldID0gdmFsdWU7ICAgIFxuICB9XG5cbn0iXX0=